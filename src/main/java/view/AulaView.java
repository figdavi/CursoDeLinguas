/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import javax.swing.JOptionPane;
import java.util.logging.Logger;
import controller.ProfessorController;
import controller.TurmaController;
import controller.AulaController;
import model.Aula;
import model.Professor;
import model.Turma;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Objects;

/**
 *
 * @author davis
 */
public class AulaView extends javax.swing.JFrame {
   
    private final ProfessorController professorController = new ProfessorController();
    private final TurmaController turmaController = new TurmaController();
    private final AulaController aulaController = new AulaController();
    private static final Logger logger = Logger.getLogger(AulaView.class.getName());

    /**
     * Creates new form AulaView
     */
    public AulaView() {
        initComponents();
        carregarTurmas();
        atualizarTabela();
        cmbProfessor.setEnabled(false);
        btnAtribuirProfessor.setEnabled(false);

        // Ao mudar a turma, atualize professores disponíveis!
        cmbTurma.addActionListener(e -> {
            Turma turma = (Turma) cmbTurma.getSelectedItem();
            carregarProfessoresParaTurma(turma);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        cmbTurma = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtHoraInicio = new javax.swing.JTextField();
        txtHoraFim = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbProfessor = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaAulas = new javax.swing.JTable();
        btnCadastrar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnAdiarAula = new javax.swing.JButton();
        btnAtribuirProfessor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID:");

        jLabel2.setText("Data:");

        cmbTurma.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Turma:");

        jLabel4.setText("Hora Fim:");

        jLabel5.setText("Hora Início:");

        txtHoraFim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoraFimActionPerformed(evt);
            }
        });

        jLabel6.setText("Professor:");

        cmbProfessor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tabelaAulas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaAulas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaAulasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaAulas);

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnAdiarAula.setText("Adiar Aula");
        btnAdiarAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdiarAulaActionPerformed(evt);
            }
        });

        btnAtribuirProfessor.setText("Atribuir Professor");
        btnAtribuirProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtribuirProfessorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbProfessor, 0, 362, Short.MAX_VALUE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(txtId)
                            .addComponent(cmbTurma, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtData)
                            .addComponent(txtHoraInicio)
                            .addComponent(txtHoraFim))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnAdiarAula))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(btnAtribuirProfessor))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnCadastrar)
                            .addGap(18, 18, 18)
                            .addComponent(btnAtualizar)
                            .addGap(18, 18, 18)
                            .addComponent(btnExcluir)
                            .addGap(18, 18, 18)
                            .addComponent(btnLimpar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnVoltar))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdiarAula))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(txtHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtribuirProfessor))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrar)
                    .addComponent(btnExcluir)
                    .addComponent(btnLimpar)
                    .addComponent(btnAtualizar)
                    .addComponent(btnVoltar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHoraFimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoraFimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraFimActionPerformed

    private void tabelaAulasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaAulasMouseClicked
        int linha = tabelaAulas.getSelectedRow();
        if (linha != -1) {
            txtId.setText(tabelaAulas.getValueAt(linha, 0).toString());
            txtData.setText(tabelaAulas.getValueAt(linha, 1).toString());
            txtHoraInicio.setText(tabelaAulas.getValueAt(linha, 2).toString());
            txtHoraFim.setText(tabelaAulas.getValueAt(linha, 3).toString());

            Object turmaObj = tabelaAulas.getValueAt(linha, 4);
            for (int i = 0; i < cmbTurma.getItemCount(); i++) {
                Turma t = (Turma) cmbTurma.getItemAt(i);
                if (Objects.equals(t, turmaObj)) {
                    cmbTurma.setSelectedIndex(i);
                    carregarProfessoresParaTurma(t); // Atualiza professores aptos!
                    break;
                }
            }

            Object professorObj = tabelaAulas.getValueAt(linha, 5);
            boolean encontrou = false;
            for (int i = 0; i < cmbProfessor.getItemCount(); i++) {
                Professor p = (Professor) cmbProfessor.getItemAt(i);
                if (Objects.equals(p, professorObj)) {
                    cmbProfessor.setSelectedIndex(i);
                    encontrou = true;
                    break;
                }
            }
            if (!encontrou) cmbProfessor.setSelectedIndex(-1);

            txtId.setEditable(false);
            txtData.setEditable(false);

            atualizarControlesAulaSelecionada();
        }
    }//GEN-LAST:event_tabelaAulasMouseClicked

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        int id;
        try {
            id = Integer.parseInt(txtId.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID inválido.");
            return;
        }
       
        Turma turma = (Turma) cmbTurma.getSelectedItem();
        String dataStr = txtData.getText().trim();
        String horaInicioStr = txtHoraInicio.getText().trim();
        String horaFimStr = txtHoraFim.getText().trim();

        LocalDate data;
        LocalTime horaInicio, horaFim;
        try {
            data = LocalDate.parse(dataStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            horaInicio = LocalTime.parse(horaInicioStr, DateTimeFormatter.ofPattern("HH:mm"));
            horaFim = LocalTime.parse(horaFimStr, DateTimeFormatter.ofPattern("HH:mm"));
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Data ou hora inválidas. Use os formatos corretos.");
            return;
        }

        // Validação de intervalo de datas
        if (data.isBefore(turma.getDataInicio()) || data.isAfter(turma.getDataFim())) {
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            JOptionPane.showMessageDialog(this, 
                "A data da aula deve estar entre o início (" 
                + turma.getDataInicio().format(fmt) +
                ") e o fim (" +
                turma.getDataFim().format(fmt) + 
                ") da turma.");
            return;
        }
        
        // Validação: hora de início deve ser antes da hora de fim
        if (!horaInicio.isBefore(horaFim)) {
            JOptionPane.showMessageDialog(this, "A hora de início deve ser menor que a hora de fim.");
            return;
        }
        
        // Professor só é atribuído depois!
        Professor professor = null;

        String resultado = aulaController.inserirAula(id, turma, data, horaInicio, horaFim, professor);
        JOptionPane.showMessageDialog(this, resultado);
        if (resultado.contains("sucesso")) {
            atualizarTabela();
            limparCampos();
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        int id;
        try {
            id = Integer.parseInt(txtId.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID inválido.");
            return;
        }
        
        Turma turma = (Turma) cmbTurma.getSelectedItem();
        if (turma == null) {
            JOptionPane.showMessageDialog(this, "Selecione uma turma.");
            return;
        }
        String dataStr = txtData.getText().trim();
        String horaInicioStr = txtHoraInicio.getText().trim();
        String horaFimStr = txtHoraFim.getText().trim();

        LocalDate data;
        LocalTime horaInicio, horaFim;
        try {
            data = LocalDate.parse(dataStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            horaInicio = LocalTime.parse(horaInicioStr, DateTimeFormatter.ofPattern("HH:mm"));
            horaFim = LocalTime.parse(horaFimStr, DateTimeFormatter.ofPattern("HH:mm"));
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Data ou hora inválidas. Use os formatos corretos.");
            return;
        }
        
        // Validação: hora de início deve ser antes da hora de fim
        if (!horaInicio.isBefore(horaFim)) {
            JOptionPane.showMessageDialog(this, "A hora de início deve ser menor que a hora de fim.");
            return;
        }
        
        // Professor só é atribuído depois!
        Professor professor = null;

        String resultado = aulaController.atualizarAula(id, turma, data, horaInicio, horaFim, professor);
        JOptionPane.showMessageDialog(this, resultado);
        if (resultado.contains("sucesso")) {
            atualizarTabela();
            limparCampos();
            txtId.setEditable(true);
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int linha = tabelaAulas.getSelectedRow();
        if (linha != -1) {
            int id = (int) tabelaAulas.getValueAt(linha, 0);
            int confirm = JOptionPane.showConfirmDialog(this, "Deseja excluir a aula selecionada?",
                    "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String resultado = aulaController.excluirAula(id);
                JOptionPane.showMessageDialog(this, resultado);
                if (resultado.contains("sucesso")) {
                    atualizarTabela();
                    limparCampos();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma aula para excluir.");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose(); // Fecha a janela atual
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnAtribuirProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtribuirProfessorActionPerformed
        int linha = tabelaAulas.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma aula na tabela!");
            return;
        }

        String dataStr = tabelaAulas.getValueAt(linha, 1).toString();
        String horaInicioStr = tabelaAulas.getValueAt(linha, 2).toString();
        String horaFimStr = tabelaAulas.getValueAt(linha, 3).toString();
        LocalDate dataAula = LocalDate.parse(dataStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        LocalTime horaInicioAula = LocalTime.parse(horaInicioStr, DateTimeFormatter.ofPattern("HH:mm"));
        LocalTime horaFimAula = LocalTime.parse(horaFimStr, DateTimeFormatter.ofPattern("HH:mm"));
        LocalDate hoje = LocalDate.now();
        LocalTime agora = LocalTime.now();
        boolean aulaJaIniciou = dataAula.isBefore(hoje)
                || (dataAula.isEqual(hoje) && !horaInicioAula.isAfter(agora));
        if (!aulaJaIniciou) {
            JOptionPane.showMessageDialog(this, "Só é possível atribuir professor na hora do início da aula.");
            return;
        }

        int id = (int) tabelaAulas.getValueAt(linha, 0);
        Professor professor = (Professor) cmbProfessor.getSelectedItem();
        if (professor == null) {
            JOptionPane.showMessageDialog(this, "Selecione um professor para atribuir!");
            return;
        }

        // Verifica conflito de horário
        boolean disponivel = aulaController.professorDisponivel(
            professor, dataAula, horaInicioAula, horaFimAula, id
        );
        if (!disponivel) {
            JOptionPane.showMessageDialog(this, "Conflito de horário: o professor já possui uma aula nesse horário.");
            return;
        }

        String resultado = aulaController.atualizarProfessor(id, professor);
        JOptionPane.showMessageDialog(this, resultado);
        if (resultado.contains("sucesso")) {
            atualizarTabela();
            limparCampos();
        }
    }//GEN-LAST:event_btnAtribuirProfessorActionPerformed

    private void btnAdiarAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdiarAulaActionPerformed
        int linha = tabelaAulas.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma aula na tabela!");
            return;
        }

        String dataStr = tabelaAulas.getValueAt(linha, 1).toString();
        String horaInicioStr = tabelaAulas.getValueAt(linha, 2).toString();
        LocalDate dataAula = LocalDate.parse(dataStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        LocalTime horaInicioAula = LocalTime.parse(horaInicioStr, DateTimeFormatter.ofPattern("HH:mm"));
        LocalDate hoje = LocalDate.now();
        LocalTime agora = LocalTime.now();
        boolean aulaJaIniciou = dataAula.isBefore(hoje)
                || (dataAula.isEqual(hoje) && !horaInicioAula.isAfter(agora));
        if (aulaJaIniciou) {
            JOptionPane.showMessageDialog(this, "Só é possível adiar aulas que ainda não começaram.");
            return;
        }

        int id = (int) tabelaAulas.getValueAt(linha, 0);

        Turma turma = (Turma) tabelaAulas.getValueAt(linha, 4);
        if (turma == null) {
            JOptionPane.showMessageDialog(this, "Erro ao identificar a turma da aula.");
            return;
        }

        String novaDataStr = JOptionPane.showInputDialog(this, "Nova data para a aula (dd/MM/yyyy):");
        if (novaDataStr == null) return;
        LocalDate novaData;
        try {
            novaData = LocalDate.parse(novaDataStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Data inválida.");
            return;
        }

        // Validação dupla
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        if (novaData.isBefore(dataAula)) {
            JOptionPane.showMessageDialog(this,
                "A nova data não pode ser menor que a data original da aula: " +
                dataAula.format(fmt));
            return;
        }
        if (novaData.isBefore(turma.getDataInicio()) || novaData.isAfter(turma.getDataFim())) {
            JOptionPane.showMessageDialog(this, 
                "A nova data da aula deve estar entre o início (" 
                + turma.getDataInicio().format(fmt) +
                ") e o fim (" +
                turma.getDataFim().format(fmt) + 
                ") da turma.");
            return;
        }

        String resultado = aulaController.atualizarData(id, novaData);
        JOptionPane.showMessageDialog(this, resultado);
        if (resultado.contains("sucesso")) {
            atualizarTabela();
            limparCampos();
        }
    }//GEN-LAST:event_btnAdiarAulaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new AulaView().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdiarAula;
    private javax.swing.JButton btnAtribuirProfessor;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox cmbProfessor;
    private javax.swing.JComboBox cmbTurma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabelaAulas;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtHoraFim;
    private javax.swing.JTextField txtHoraInicio;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables

    private void carregarProfessoresParaTurma(Turma turma) {
        cmbProfessor.removeAllItems();
        cmbProfessor.addItem(null); // Pode manter para caso de "sem professor"
        if (turma == null) return;
        List<Professor> professores = professorController.listarTodosProfessores();
        for (Professor p : professores) {
            if (p.getLinguas().contains(turma.getLingua())) {
                cmbProfessor.addItem(p);
            }
        }
    }

    private void carregarTurmas() {
        List<Turma> turmas = turmaController.listarTodasTurmas();
        cmbTurma.removeAllItems();
        cmbTurma.addItem(null);
        for (Turma t : turmas) {
            cmbTurma.addItem(t);
        }
    }
    
    private void atualizarTabela() {
        List<Aula> aulas = aulaController.listarTodasAulas();
        String[] colunas = { "ID", "Data", "Hora Início", "Hora Fim", "Turma", "Professor" };
        Object[][] dados = new Object[aulas.size()][6];

        for (int i = 0; i < aulas.size(); i++) {
            Aula a = aulas.get(i);
            dados[i][0] = a.getId();
            dados[i][1] = a.getData().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            dados[i][2] = a.getHoraInicio().toString();
            dados[i][3] = a.getHoraFim().toString();
            dados[i][4] = a.getTurma();
            dados[i][5] = a.getProfessor();
        }

        tabelaAulas.setModel(new javax.swing.table.DefaultTableModel(dados, colunas) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        limparCampos();
    }
    
    private void limparCampos() {
        txtId.setText("");
        txtData.setText("");
        txtHoraInicio.setText("");
        txtHoraFim.setText("");
        cmbProfessor.setSelectedIndex(-1);
        cmbProfessor.setEnabled(false);
        cmbTurma.setSelectedIndex(-1);
        txtId.setEditable(true);
        txtData.setEditable(true);
        btnAtribuirProfessor.setEnabled(false);
        btnAdiarAula.setEnabled(false);
    }
    
    private void atualizarControlesAulaSelecionada() {
        int linha = tabelaAulas.getSelectedRow();
        if (linha == -1) return;

        String dataStr = tabelaAulas.getValueAt(linha, 1).toString();
        String horaInicioStr = tabelaAulas.getValueAt(linha, 2).toString();

        LocalDate dataAula = LocalDate.parse(dataStr, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        LocalTime horaInicioAula = LocalTime.parse(horaInicioStr, DateTimeFormatter.ofPattern("HH:mm"));

        LocalDate hoje = LocalDate.now();
        LocalTime agora = LocalTime.now();

        boolean aulaJaIniciou = dataAula.isBefore(hoje)
                || (dataAula.isEqual(hoje) && !horaInicioAula.isAfter(agora));

        btnAtribuirProfessor.setEnabled(aulaJaIniciou);
        cmbProfessor.setEnabled(aulaJaIniciou);

        btnAdiarAula.setEnabled(!aulaJaIniciou);
    }
}