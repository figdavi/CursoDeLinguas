/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import java.util.logging.Logger;
import controller.TurmaController;
import model.Turma;
import model.Aluno;

/**
 *
 * @author davis
 */
public class NotaFinalView extends javax.swing.JFrame {  
    private TurmaController turmaController = new TurmaController();
    model.Turma turmaSelecionada;
    private static final Logger logger = Logger.getLogger(NotaFinalView.class.getName());

    /**
     * Creates new form NotaFinalView
     */
    public NotaFinalView() {
        initComponents();
        carregarTurmas();
        turmaSelecionada = null;
        configurarTabela();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbTurma = new javax.swing.JComboBox();
        scrollNotas = new javax.swing.JScrollPane();
        tabelaNotas = new javax.swing.JTable();
        btnSalvar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registrar Notas Finais");

        jLabel1.setText("Turma:");

        cmbTurma.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTurmaActionPerformed(evt);
            }
        });

        tabelaNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollNotas.setViewportView(tabelaNotas);

        btnSalvar.setText("Salvar Notas");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(cmbTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(btnSalvar)
                        .addGap(180, 180, 180)
                        .addComponent(btnVoltar))
                    .addComponent(scrollNotas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(scrollNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnVoltar))
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTurmaActionPerformed
        turmaSelecionada = (Turma) cmbTurma.getSelectedItem();
        carregarNotasNaTabela();
    }//GEN-LAST:event_cmbTurmaActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (turmaSelecionada == null) {
            JOptionPane.showMessageDialog(this, "Selecione uma turma.");
            return;
        }

        // Força salvar qualquer valor em edição antes de ler os dados!
        if (tabelaNotas.isEditing()) {
            tabelaNotas.getCellEditor().stopCellEditing();
        }

        javax.swing.table.DefaultTableModel model =
            (javax.swing.table.DefaultTableModel) tabelaNotas.getModel();

        boolean houveErro = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            String alunoStr = String.valueOf(model.getValueAt(i, 0));
            String notaStr = String.valueOf(model.getValueAt(i, 1)).replace(',', '.').trim();

            if (alunoStr.equals("Nenhum aluno matriculado")) continue;

            try {
                int matricula = Integer.parseInt(alunoStr.split(" - ")[0]);
                if (notaStr.isEmpty()) continue; // Pula nota em branco

                double nota = Double.parseDouble(notaStr);

                String resultado = turmaController.registrarNota(turmaSelecionada.getId(), matricula, nota);
                if (!resultado.startsWith("Nota registrada")) {
                    houveErro = true;
                }
            } catch (NumberFormatException ex) {
                houveErro = true;
            }
        }

        if (houveErro)
            JOptionPane.showMessageDialog(this, "Alguma(s) nota(s) não puderam ser salvas.");
        else
            JOptionPane.showMessageDialog(this, "Notas salvas com sucesso!");

        carregarNotasNaTabela();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose(); // Fecha a janela atual
    }//GEN-LAST:event_btnVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new NotaFinalView().setVisible(true));
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox cmbTurma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane scrollNotas;
    private javax.swing.JTable tabelaNotas;
    // End of variables declaration//GEN-END:variables

    // Permite editar só a coluna de nota!
    private void configurarTabela() {
        tabelaNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][] {},
            new String[] { "Aluno", "Nota" }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 1; // Só a coluna Nota é editável
            }
        });
    }

    private void carregarTurmas() {
        cmbTurma.removeAllItems();
        cmbTurma.addItem(null); // padrão, vazio
        List<Turma> turmas = turmaController.listarTodasTurmas();
        for (Turma t : turmas) {
            cmbTurma.addItem(t);
        }
        cmbTurma.setSelectedIndex(-1); // Nenhuma selecionada por padrão
    }

    private void carregarNotasNaTabela() {
        configurarTabela();
        if (turmaSelecionada == null) return;

        javax.swing.table.DefaultTableModel model =
            (javax.swing.table.DefaultTableModel) tabelaNotas.getModel();

        List<Aluno> alunos = turmaController.listarAlunosMatriculados(turmaSelecionada.getId());
        if (alunos == null || alunos.isEmpty()) {
            model.addRow(new Object[] { "Nenhum aluno matriculado", "" });
            return;
        }

        Map<Integer, Double> notas = turmaController.listarNotasFinais(turmaSelecionada.getId());
        for (Aluno aluno : alunos) {
            Double nota = notas.get(aluno.getMatricula());
            model.addRow(new Object[] {
                aluno.getMatricula() + " - " + aluno.getNome(),
                nota != null ? nota : ""
            });
        }
    }
}
