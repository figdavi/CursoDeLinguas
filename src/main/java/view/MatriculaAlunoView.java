/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.AlunoController;
import controller.TurmaController;
import model.Turma;
import model.Aluno;
import javax.swing.*;
import java.util.List;
import java.util.logging.Logger;

/**
 *
 * @author davis
 */
public class MatriculaAlunoView extends javax.swing.JFrame {
    private final TurmaController turmaController = new TurmaController();
    private final AlunoController alunoController = new AlunoController();
    private static final Logger logger = Logger.getLogger(MatriculaAlunoView.class.getName());

    public MatriculaAlunoView() {
        setTitle("Matrícula de Aluno em Turma");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(600, 400);
        setLocationRelativeTo(null);
        initComponents();
        carregarAlunos();
        carregarTurmas();
        atualizarTabela();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMatricular = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        scrollMatriculados = new javax.swing.JScrollPane();
        tabelaMatriculados = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        cmbTurma = new javax.swing.JComboBox();
        cmbAluno = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnMatricular.setText("Matricular");
        btnMatricular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMatricularActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        tabelaMatriculados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollMatriculados.setViewportView(tabelaMatriculados);

        jLabel1.setText("Aluno:");

        jLabel2.setText("Turma:");

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        cmbTurma.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbAluno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(cmbTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnMatricular)
                                .addGap(28, 28, 28)
                                .addComponent(btnRemover)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnVoltar))
                            .addComponent(scrollMatriculados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(329, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMatricular)
                    .addComponent(btnRemover)
                    .addComponent(btnVoltar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollMatriculados, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(331, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMatricularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMatricularActionPerformed
        Turma turma = (Turma) cmbTurma.getSelectedItem();
        Aluno aluno = (Aluno) cmbAluno.getSelectedItem();
        if (turma == null || aluno == null) {
            JOptionPane.showMessageDialog(this, "Selecione um aluno e uma turma.");
            return;
        }
        String resultado = turmaController.matricularAluno(turma.getId(), aluno.getMatricula());
        JOptionPane.showMessageDialog(this, resultado);
        atualizarTabela();
    }//GEN-LAST:event_btnMatricularActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        Turma turma = (Turma) cmbTurma.getSelectedItem();
        int linha = tabelaMatriculados.getSelectedRow();
        if (turma == null || linha == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma turma e um aluno da lista.");
            return;
        }
        int matricula = (int) tabelaMatriculados.getValueAt(linha, 0);
        int confirm = JOptionPane.showConfirmDialog(this,
                "Deseja remover a matrícula do aluno selecionado?",
                "Confirmação",
                JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String resultado = turmaController.desmatricularAluno(turma.getId(), matricula);
            JOptionPane.showMessageDialog(this, resultado);
            atualizarTabela();
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void tabelaMatriculadosClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMatriculadosClick
        // TODO add your handling code here:
    }//GEN-LAST:event_tabelaMatriculadosClick

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose(); // Fecha a janela atual
    }//GEN-LAST:event_btnVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MatriculaAlunoView().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMatricular;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox cmbAluno;
    private javax.swing.JComboBox cmbTurma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane scrollMatriculados;
    private javax.swing.JTable tabelaMatriculados;
    // End of variables declaration//GEN-END:variables

    private void atualizarTabela() {
        Turma turma = (Turma) cmbTurma.getSelectedItem();
        if (turma == null) {
            tabelaMatriculados.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {}, new String[] {"Matrícula", "Nome", "Telefone"}));
            return;
        }
        List<Aluno> alunos = turmaController.listarAlunosMatriculados(turma.getId());
        String[] colunas = {"Matrícula", "Nome", "Telefone"};
        Object[][] dados = new Object[alunos.size()][3];
        for (int i = 0; i < alunos.size(); i++) {
            Aluno a = alunos.get(i);
            dados[i][0] = a.getMatricula();
            dados[i][1] = a.getNome();
            dados[i][2] = a.getTelefone();
        }
        tabelaMatriculados.setModel(new javax.swing.table.DefaultTableModel(dados, colunas) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
    }

    private void carregarAlunos() {
        cmbAluno.removeAllItems();
        cmbAluno.addItem(null); // item vazio
        List<Aluno> alunos = alunoController.listarTodosAlunos();
        for (Aluno a : alunos) {
            cmbAluno.addItem(a); // usa o toString do Aluno!
        }
        cmbAluno.setSelectedIndex(-1);
    }

    private void carregarTurmas() {
        cmbTurma.removeAllItems();
        cmbTurma.addItem(null); // item vazio
        List<Turma> turmas = turmaController.listarTodasTurmas();
        for (Turma t : turmas) {
            cmbTurma.addItem(t); // usa o toString do Turma!
        }
        cmbTurma.setSelectedIndex(-1);

        // Atualiza a tabela ao trocar de turma
        cmbTurma.addActionListener(e -> atualizarTabela());
    }
}
